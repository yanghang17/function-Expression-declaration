

function add1(i){
  console.log("函数声明1："+(i+100));           //函数声明，在预处理前，声明和函数体都会被提前
}
add1(1);                                       //调用的因为函数同名，所以后一个就会把前一个覆盖了,调用最后的（函数声明3）,执行完,释放函数
var add1 = function(i){
  console.log("函数表达式1："+(i+100));
}
add1(2);                                       //add1(2)执行函数表达式1，add被赋值,如果后面没有新的赋值定义,就会一直使用
function add1(i) {
    console.log("函数声明2："+(i+100));
}
add1(3);                                       //add1(3)执行函数表达式1,因为add已经被赋值定义
var add1 = function(i){
  console.log("函数表达式2："+(i+100));
}
add1(4);                                      //add1(4)出现新的赋值定定义add,所以执行函数表达式2,后面的也都执行函数表达2
function add1(i) {
    console.log("函数声明3："+(i+100));
}
add1(5);                                     //add1(5)执行函数表达式2函数
 

//输出结果：
函数声明3：101
函数表达式1：102
函数表达式1：103
函数表达式2：104
函数表达式2：105
js函数运行在它们被定义的作用域里,而不是它们被执行的作用域里。

add()
function add() {
alert("函数声明"）                         此函数会被调用，因为函数体也会被前置到顶，所以add是可以调用他的
}
add1()
var add1 = new function() {
alert("函数表达式"）
}                                          add1会报错（add1 is not a function）她只是声明被提前了


函数声明和函数表达
还有一个函数实例化的创建函数方法，但是很少使用，不推荐
var add = new Function() {}
